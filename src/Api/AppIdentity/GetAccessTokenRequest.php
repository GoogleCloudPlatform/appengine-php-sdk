<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: app_identity_service.proto

namespace Google\AppEngine\Api\AppIdentity;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>google.appEngine.api.appIdentity.GetAccessTokenRequest</code>
 */
class GetAccessTokenRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * At the moment the 'id' and 'name' fields are used only for superapps.
     * However if/when we support multiple robot for a single app, they will
     * will be used to select the appropriate account.
     *
     * Generated from protobuf field <code>repeated string scope = 1;</code>
     */
    private $scope;
    /**
     * TODO(wlhe): reserve these two fields once all the depending codes
     * are removed.
     *
     * Generated from protobuf field <code>int64 service_account_id = 2;</code>
     */
    protected $service_account_id = null;
    /**
     * Service account name is superapp only, and only a refresh token of the
     * form r:refresh token is supported.
     *
     * Generated from protobuf field <code>string service_account_name = 3 [deprecated = true];</code>
     * @deprecated
     */
    protected $service_account_name = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $scope
     *           At the moment the 'id' and 'name' fields are used only for superapps.
     *           However if/when we support multiple robot for a single app, they will
     *           will be used to select the appropriate account.
     *     @type int|string $service_account_id
     *           TODO(wlhe): reserve these two fields once all the depending codes
     *           are removed.
     *     @type string $service_account_name
     *           Service account name is superapp only, and only a refresh token of the
     *           form r:refresh token is supported.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\AppIdentityService::initOnce();
        parent::__construct($data);
    }

    /**
     * At the moment the 'id' and 'name' fields are used only for superapps.
     * However if/when we support multiple robot for a single app, they will
     * will be used to select the appropriate account.
     *
     * Generated from protobuf field <code>repeated string scope = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * At the moment the 'id' and 'name' fields are used only for superapps.
     * However if/when we support multiple robot for a single app, they will
     * will be used to select the appropriate account.
     *
     * Generated from protobuf field <code>repeated string scope = 1;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setScope($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->scope = $arr;

        return $this;
    }

    /**
     * TODO(wlhe): reserve these two fields once all the depending codes
     * are removed.
     *
     * Generated from protobuf field <code>int64 service_account_id = 2;</code>
     * @return int|string
     */
    public function getServiceAccountId()
    {
        return isset($this->service_account_id) ? $this->service_account_id : 0;
    }

    public function hasServiceAccountId()
    {
        return isset($this->service_account_id);
    }

    public function clearServiceAccountId()
    {
        unset($this->service_account_id);
    }

    /**
     * TODO(wlhe): reserve these two fields once all the depending codes
     * are removed.
     *
     * Generated from protobuf field <code>int64 service_account_id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setServiceAccountId($var)
    {
        GPBUtil::checkInt64($var);
        $this->service_account_id = $var;

        return $this;
    }

    /**
     * Service account name is superapp only, and only a refresh token of the
     * form r:refresh token is supported.
     *
     * Generated from protobuf field <code>string service_account_name = 3 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getServiceAccountName()
    {
        @trigger_error('service_account_name is deprecated.', E_USER_DEPRECATED);
        return isset($this->service_account_name) ? $this->service_account_name : '';
    }

    public function hasServiceAccountName()
    {
        @trigger_error('service_account_name is deprecated.', E_USER_DEPRECATED);
        return isset($this->service_account_name);
    }

    public function clearServiceAccountName()
    {
        @trigger_error('service_account_name is deprecated.', E_USER_DEPRECATED);
        unset($this->service_account_name);
    }

    /**
     * Service account name is superapp only, and only a refresh token of the
     * form r:refresh token is supported.
     *
     * Generated from protobuf field <code>string service_account_name = 3 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setServiceAccountName($var)
    {
        @trigger_error('service_account_name is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->service_account_name = $var;

        return $this;
    }

}

